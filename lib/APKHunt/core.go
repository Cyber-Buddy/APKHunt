package APKHunt

import (
	"fmt"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"regexp"
	"strings"
	"time"

	"github.com/s9rA16Bf4/APKHunt/lib/AndroidManifest"
	v2 "github.com/s9rA16Bf4/APKHunt/lib/OWASP/v2"
	v3 "github.com/s9rA16Bf4/APKHunt/lib/OWASP/v3"
	"github.com/s9rA16Bf4/APKHunt/lib/colors"
)

func Core(apkpath string) {

	//APK filepath check
	if _, err := os.Stat(apkpath); err != nil {
		if os.IsNotExist(err) {
			Error(fmt.Sprintf("Given file-path '%s' does not exist. \n[!] Kindly verify the path/filename! \n[!] Exiting...", apkpath))
		}
	}

	if filepath.Ext(apkpath) != ".apk" {
		Error(fmt.Sprintf("Given file '%s' does not seem to be an apk file. \n[!] Kindly verify the file! \n[!] Exiting...", apkpath))
	}

	start_time := time.Now()
	Inform(fmt.Sprintf("Scan has been started at: %d", start_time))

	// APK filepath analysis
	ManifestPath := FilePathAnalysis(apkpath)
	Inform(fmt.Sprintf("%s==>> The Basic Information...\n%s", colors.Purple, colors.Reset))

	// AndroidManifest file - Package name
	AndroidManifest.InvestigatePackageName(ManifestPath)

	//AndroidManifest file - Package version number
	AndroidManifest.InvestigateVersionNumber(ManifestPath)

	//AndroidManifest file - minSdkVersion
	AndroidManifest.InvestigateMinSDKVersion(ManifestPath)

	//AndroidManifest file - targetSdkVersion
	AndroidManifest.InvestigateTargetSDKVersion(ManifestPath)

	//AndroidManifest file - android:networkSecurityConfig="@xml/
	AndroidManifest.InvestigateAndroidNetworkSecurity(ManifestPath)

	// AndroidManifest file - Activities
	AndroidManifest.InvestigateActivities(ManifestPath)

	// AndroidManifest file - Exported Activities
	exportedActivities := AndroidManifest.InvestigateExportedActivities(ManifestPath)

	// AndroidManifest file - Content Providers
	AndroidManifest.InvestigateContentProviders(ManifestPath)

	// AndroidManifest file - Exported Content Providers
	exportedContentProviders := AndroidManifest.InvestigateExportedContentProviders(ManifestPath)

	// AndroidManifest file - Brodcast Receivers
	AndroidManifest.InvestigateBroadcastReceivers(ManifestPath)

	// AndroidManifest file - Exported Brodcast Receivers
	exportedBroadCastReceivers := AndroidManifest.InvestigateExportedBroadcastReceivers(ManifestPath)

	// AndroidManifest file - Services
	AndroidManifest.InvestigateServices(ManifestPath)

	// AndroidManifest file - Exported Services
	exportedServices := AndroidManifest.InvestigateExportedServices(ManifestPath)

	// AndroidManifest file - Intent Filters
	AndroidManifest.InvestigateIntentFilters(ManifestPath)

	// APK Component Summary
	ApkSummary(exportedActivities, exportedContentProviders, exportedBroadCastReceivers, exportedServices)

	// SAST - Recursive file reading
	SAST()

	// OWASP MASVS - V2: Data Storage and Privacy Requirements
	v2.InvestigateStorageNPrivacyRequiements()

	// MASVS V2 - MSTG-STORAGE-2 - SQLite Database
	v2.InvestigateSQLDatabse()

	// MASVS V2 - MSTG-STORAGE-2 - Firebase Database
	v2.InvestigateFireDatabse()

	// MASVS V2 - MSTG-STORAGE-2 - Realm Database
	v2.InvestigateRealmDatabse()

	// MASVS V2 - MSTG-STORAGE-2 - Internal Storage
	v2.InvestigateInternalStorage()

	// MASVS V2 - MSTG-STORAGE-2 - External Storage
	v2.InvestigateExternalStorage()

	// MASVS V2 - MSTG-STORAGE-2 - Temporary File Creation
	v2.InvestigateTemporaryFileCreation()

	// MASVS V2 - MSTG-PLATFORM-2 - Local Storage - Input Validation
	v2.InvestigateLocalStorageInputValidation()

	// MASVS V2 - MSTG-STORAGE-3 - Logs for Sensitive Data
	v2.InvestigateLogsForSensitiveData()

	// MASVS V2 - MSTG-STORAGE-4 - NotificationManager
	v2.InvestigateNotificationManager()

	// MASVS V2 - MSTG-STORAGE-5 - Keyboard Cache
	v2.InvestigateKeyboardCache()

	// MASVS V2 - MSTG-STORAGE-7 - Sensitive Data Disclosure Through the User Interface
	v2.InvestigateSensitiveDataThroughUserInterface()

	// MASVS V2 - MSTG-STORAGE-8 - AndroidManifest file - Package allowBackup
	v2.InvestigateAllowBackup()

	// MASVS V2 - MSTG-STORAGE-9 - Auto-Generated Screenshots
	v2.InvestigateAutoGeneratedScreenshots()

	// MASVS V2 - MSTG-STORAGE-10 - Memory flush
	v2.InvestigateMemoryFlush()

	// MASVS V2 - MSTG-STORAGE-10 - ClipboardManager
	v2.InvestigateClipboardManager()

	// MASVS V2 - MSTG-STORAGE-14 - Hard-coded Information
	v2.InvestigateHardcodedInformation()

	// MASVS V2 - MSTG-STORAGE-14 - Possible Hard-coded Keys/Tokens/Secrets
	v2.InvestigateHardCodedSecrets()

	// OWASP MASVS - V3: Cryptography Requirements
	v3.InvestigateSymmetricCryptography()

	// MASVS V3 - MSTG-CRYPTO-4 - Insecure/Deprecated Cryptographic Algorithms
	fmt.Printf(string(Purple))
	log.Println("\n==>> The Insecure/Deprecated Cryptographic Algorithms...\n")
	fmt.Printf(string(Reset))
	var countWeakCrypto = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_hash, err := exec.Command("grep", "-nr", "-e", "Signature.getInstance", "-e", "MessageDigest.getInstance", "-e", "Mac.getInstance", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- Insecure/Deprecated Cryptographic Algorithms has not been observed")
			}
			cmd_and_pkg_hash_output := string(cmd_and_pkg_hash[:])
			if strings.Contains(cmd_and_pkg_hash_output, "getInstance") {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_hash_output)
				countWeakCrypto++
			}
		}
	}
	if int(countWeakCrypto) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended that cryptographic algorithms used in the application are up to date and in-line with industry standards. Please note that, Vulnerable algorithms include outdated block ciphers (such as DES, DESede, and 3DES), stream ciphers (such as RC4), hash functions (such as MD5 and SHA1), and broken random number generators (such as Dual_EC_DRBG and SHA1PRNG).")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-CRYPTO-4 | CWE-327: Use of a Broken or Risky Cryptographic Algorithm")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements")
	}

	// MASVS V3 - MSTG-CRYPTO-3 - Insecure/Weak Cipher Modes
	fmt.Printf(string(Purple))
	log.Println("\n==>> The Insecure/Weak Cipher Modes...\n")
	fmt.Printf(string(Reset))
	var countWeakCipher = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_cipher, err := exec.Command("grep", "-nr", "-e", "Cipher.getInstance", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- Insecure/Weak Cipher Modes has not been observed")
			}
			cmd_and_pkg_cipher_output := string(cmd_and_pkg_cipher[:])
			if (strings.Contains(cmd_and_pkg_cipher_output, "/None/")) || (strings.Contains(cmd_and_pkg_cipher_output, "/ECB/")) || (strings.Contains(cmd_and_pkg_cipher_output, "/CBC/")) || (strings.Contains(cmd_and_pkg_cipher_output, "PKCS1Padding")) || (strings.Contains(cmd_and_pkg_cipher_output, `"AES"`)) || (strings.Contains(cmd_and_pkg_cipher_output, `"DES"`)) || (strings.Contains(cmd_and_pkg_cipher_output, `"RC4"`)) {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_cipher_output)
				countWeakCipher++
			}
		}
	}
	if int(countWeakCipher) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended to use a block mode that protects the integrity of the stored data, such as Galois/Counter Mode (GCM). Please note that, the ECB and CBC modes provide confidentiality, but other modes such as Galois Counter Mode (GCM) provides both confidentiality and integrity protection.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-CRYPTO-3 | CWE-649: Reliance on Obfuscation or Encryption of Security-Relevant Inputs without Integrity Checking")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements")
	}

	// MASVS V3 - MSTG-CRYPTO-3 - Static IVs
	fmt.Printf(string(Purple))
	log.Println("\n==>> The Static IVs...\n")
	fmt.Printf(string(Reset))
	var countHardKeys = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_key, err := exec.Command("grep", "-nr", "-F", "byte[] ", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- Static IVs have not been observed")
			}
			cmd_and_pkg_key_output := string(cmd_and_pkg_key[:])
			if (strings.Contains(cmd_and_pkg_key_output, " = {0, 0, 0, 0, 0")) || (strings.Contains(cmd_and_pkg_key_output, " = {1, 2, 3, 4, 5")) || (strings.Contains(cmd_and_pkg_key_output, " = {0, 1, 2, 3, 4")) {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_key_output)
				countHardKeys++
			}
		}
	}
	if int(countHardKeys) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended not to use Static IVs for any sensitive data, if observed. Please note that, Cryptographic keys should not be kept in the source code and IVs must be regenerated for each message to be encrypted.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-CRYPTO-3 | CWE-1204: Generation of Weak Initialization Vector (IV)")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements")
	}

	// MASVS V3 - MSTG-CRYPTO-6 - Weak Random functions
	fmt.Printf(string(Purple))
	log.Println("\n==>> The Weak Random functions...\n")
	fmt.Printf(string(Reset))
	var countRandom = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_random_func, err := exec.Command("grep", "-nr", "-e", "new Random(", "-e", "SHA1PRNG", "-e", "Dual_EC_DRBG", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- Weak Random function has not been observed")
			}
			cmd_and_pkg_random_func_output := string(cmd_and_pkg_random_func[:])
			if (strings.Contains(cmd_and_pkg_random_func_output, "new Random(")) || (strings.Contains(cmd_and_pkg_random_func_output, "SHA1PRNG")) || (strings.Contains(cmd_and_pkg_random_func_output, "Dual_EC_DRBG")) {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_random_func_output)
				countRandom++
			}
		}
	}
	if int(countRandom) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended to use Pseudo-random number generators along-with 256-bit seed for producing a random-enough number, if observed. Please note that, Under certain conditions this weakness may expose mobile application data encryption or other protection based on randomization.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-CRYPTO-6 | CWE-330: Use of Insufficiently Random Values")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements")
	}

	// OWASP MASVS - V4: Authentication and Session Management Requirements
	log.Println("\n")
	fmt.Printf(string(BlueBold))
	log.Println(`[+] Hunting begins based on "V4: Authentication and Session Management Requirements"`)
	fmt.Printf(string(Reset))
	log.Println("[+] --------------------------------------------------------------------------------")

	// MASVS V4 - MSTG-AUTH-2 - Cookies
	fmt.Printf(string(Purple))
	log.Println("\n==>> The cookie related instances...\n")
	fmt.Printf(string(Reset))
	var countCookies = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_cookie, err := exec.Command("grep", "-nri", "-e", " setAcceptThirdPartyCookies(", "-e", "setCookie(", "-e", "CookieManager", "-e", "findViewById(", "-e", "setWebViewClient(", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- cookie related instances has not been observed")
			}
			cmd_and_pkg_cookie_output := string(cmd_and_pkg_cookie[:])
			if (strings.Contains(cmd_and_pkg_cookie_output, "setAcceptThirdPartyCookies(")) || (strings.Contains(cmd_and_pkg_cookie_output, "setCookie(")) {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				if (strings.Contains(cmd_and_pkg_cookie_output, "setAcceptThirdPartyCookies(")) || (strings.Contains(cmd_and_pkg_cookie_output, "setCookie(")) || (strings.Contains(cmd_and_pkg_cookie_output, "CookieManager(")) || (strings.Contains(cmd_and_pkg_cookie_output, "findViewById(")) || (strings.Contains(cmd_and_pkg_cookie_output, "setWebViewClient(")) {
					log.Println(cmd_and_pkg_cookie_output)
					countCookies++
				}
			}
		}
	}
	if int(countCookies) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended to handle the cookies safely, which are used by the application's WebView instances, if observed. Please note that, Attacker can defraud the user by stealing his/her session or installing arbitrary cookies.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-AUTH-2 | CWE-359: Exposure of Private Personal Information to an Unauthorized Actor")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x09-v4-authentication_and_session_management_requirements")
	}

	// MASVS V4 - MSTG-AUTH-8 - Biometric Authentication
	fmt.Printf(string(Purple))
	fmt.Println("\n==>> The Biometric Authentication mechanism...\n", string(Reset))
	var countBiometric = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_biometric, err := exec.Command("grep", "-nr", "-e", "BiometricPrompt", "-e", "BiometricManager", "-e", "FingerprintManager", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- Biometric Authentication mechanism has not been observed")
			}
			cmd_and_pkg_biometric_output := string(cmd_and_pkg_biometric[:])
			if (strings.Contains(cmd_and_pkg_biometric_output, "CryptoObject")) || (strings.Contains(cmd_and_pkg_biometric_output, "BiometricPrompt")) || (strings.Contains(cmd_and_pkg_biometric_output, "FingerprintManager")) {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_biometric_output)
				countBiometric++
			}
		}
	}
	if int(countBiometric) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended to use Biometric Authentication mechanism along-with CryptoObject appropriately, if observed. Please note that, If CryptoObject is not used as part of the authenticate method or used in an incorrect way, it can be bypassed by using tools such as Frida. Further, please be informed that the FingerprintManager class is deprecated in Android 9 (API level 28) and the Biometric library should be used instead as a best practice.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-AUTH-8 | CWE-287: Improper Authentication")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x09-v4-authentication_and_session_management_requirements")
	}

	// MASVS V4 - MSTG-AUTH-8 - if Keys are not invalidated after biometric enrollment
	fmt.Printf(string(Purple))
	fmt.Println("\n==>> Keys are not invalidated after biometric enrollment...\n", string(Reset))
	var countBiometricKeys = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_biometricKeys, err := exec.Command("grep", "-nr", "-F", ".setInvalidatedByBiometricEnrollment(", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- Biometric Authentication mechanism has not been observed")
			}
			cmd_and_pkg_biometricKeys_output := string(cmd_and_pkg_biometricKeys[:])
			if strings.Contains(cmd_and_pkg_biometricKeys_output, "setInvalidatedByBiometricEnrollment") {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_biometricKeys_output)
				countBiometricKeys++
			}
		}
	}
	if int(countBiometricKeys) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended to set the flag as false, if observed. Please note that, an attacker can retrieve the key from the KeyStore by enrolling a new authentication method, if the keys are not invalidated after enrollment of a new biometric authentication method.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-AUTH-8 | CWE-287: Improper Authentication")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x09-v4-authentication_and_session_management_requirements")
	}
	fmt.Printf(string(Cyan))
	log.Println("[~] NOTE:")
	fmt.Printf(string(Reset))
	log.Printf("    - The test scenarios related to the different authentication mechanisms, stateful/stateless session management, user activities, strong password policies, etc. should be covered during your dynamic analysis/API testing phase.")

	// OWASP MASVS - V5: Network Communication Requirements
	log.Println("\n")
	fmt.Printf(string(BlueBold))
	log.Println(`[+] Hunting begins based on "V5: Network Communication Requirements"`)
	fmt.Printf(string(Reset))
	log.Println("[+] ----------------------------------------------------------------")

	// MASVS V5 - MSTG-NETWORK-1 - Network Security Configuration file
	fmt.Printf(string(Purple))
	log.Println("\n==>> The presence of the Network Security Configuration file...")
	fmt.Printf(string(Reset))
	var net_sec_conf_file string
	if nwSecConf_final == `` {
		net_sec_conf_file = globpath_res + "res/xml/network_security_config.xml"
	} else {
		net_sec_conf_file_temp := globpath_res + "res/xml/" //network_security_config.xml
		net_sec_conf_file = net_sec_conf_file_temp + nwSecConf_final + `.xml`
	}
	//fmt.Println("netSecConf file:",net_sec_conf_file)

	_, net_sec_conf_err := os.Stat(net_sec_conf_file)
	if os.IsNotExist(net_sec_conf_err) {
		fmt.Printf(string(Cyan))
		log.Println("\n[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Println("    - It is recommended to configure the Network Security Configuration file (such as network_security_config.xml) as it does not exist. Please note that, Network Security Config file can be used to protect against cleartext traffic, set up trusted certificate authorities, implement certificate pinning, etc. in terms of network security settings.") //or may be saved with an obfuscated name.")
		fmt.Printf(string(Cyan))
		log.Println("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-NETWORK-1 | CWE-693: Protection Mechanism Failure")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements")
	} else {
		fmt.Printf(string(Cyan))
		log.Println("\n[+] QuickNote:")
		fmt.Printf(string(Reset))
		log.Println("    - It has been observed that Network Security Configuration file is present at:")
		log.Printf("      %s", net_sec_conf_file)
		fmt.Printf(string(Cyan))
		log.Println("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-NETWORK-1 | CWE-693: Protection Mechanism Failure")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements")
	}

	// MASVS V5 - MSTG-NETWORK-1 - Possible MITM attack
	fmt.Printf(string(Purple))
	log.Println("\n==>> The Possible MITM attack...\n")
	fmt.Printf(string(Reset))
	var countHTTP = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_unencryptedProtocol, err := exec.Command("grep", "-nri", "-e", "(HttpURLConnection)", "-e", "SSLCertificateSocketFactory.getInsecure(", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- Possible MITM attack has not been observed")
			}
			cmd_and_pkg_unencryptedProtocol_output := string(cmd_and_pkg_unencryptedProtocol[:])
			if (strings.Contains(cmd_and_pkg_unencryptedProtocol_output, "HttpURLConnection")) || (strings.Contains(cmd_and_pkg_unencryptedProtocol_output, "getInsecure")) {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_unencryptedProtocol_output)
				countHTTP++
			}
		}
	}
	if int(countHTTP) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended not to use any unencrypted transmission mechanisms for sensitive data. Please note that, the HTTP protocol does not provide any encryption of the transmitted data, which can be easily intercepted by an attacker.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-NETWORK-1 | CWE-319: Cleartext Transmission of Sensitive Information")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements")
	}

	// MASVS V5 - MSTG-NETWORK-2 - Weak SSL/TLS protocols
	fmt.Printf(string(Purple))
	log.Println("\n==>> The Weak SSL/TLS protocols...\n")
	fmt.Printf(string(Reset))
	var countWeakTLS = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_weakTLSProtocol, err := exec.Command("grep", "-nri", "-e", "SSLContext.getInstance(", "-e", "tlsVersions(TlsVersion", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- Weak SSL/TLS protocols has not been observed")
			}
			cmd_and_pkg_weakTLSProtocol_output := string(cmd_and_pkg_weakTLSProtocol[:])
			if (strings.Contains(cmd_and_pkg_weakTLSProtocol_output, "tls")) || (strings.Contains(cmd_and_pkg_weakTLSProtocol_output, "SSL")) {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_weakTLSProtocol_output)
				countWeakTLS++
			}
		}
	}
	if int(countWeakTLS) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended to enforce TLS 1.2 as the minimum protocol version. Please note that, Failure to do so could open the door to downgrade attacks such as DROWN/POODLE/BEAST etc.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-NETWORK-2 | CWE-326: Inadequate Encryption Strength")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements")
	}

	// MASVS V5 - MSTG-NETWORK-2 - Cleartext Traffic
	fmt.Printf(string(Purple))
	log.Println("\n==>>  The app is allowing cleartext traffic...\n")
	fmt.Printf(string(Reset))
	var countClearTraffic = 0
	for _, sources_file := range files_res {
		if filepath.Ext(sources_file) == ".xml" {
			cmd_and_pkg_cleartextTraffic, err := exec.Command("grep", "-nr", "-e", "android:usesCleartextTraffic", "-e", "cleartextTrafficPermitted", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- cleartext traffic has not been observed")
			}
			cmd_and_pkg_cleartextTraffic_output := string(cmd_and_pkg_cleartextTraffic[:])
			if (strings.Contains(cmd_and_pkg_cleartextTraffic_output, "android:usesCleartextTraffic")) || (strings.Contains(cmd_and_pkg_cleartextTraffic_output, "cleartextTrafficPermitted")) {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_cleartextTraffic_output)
				countClearTraffic++
			}
		}
	}
	if int(countClearTraffic) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended to set android:usesCleartextTraffic or cleartextTrafficPermitted to false. Please note that, Sensitive information should be sent over secure channels only.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-NETWORK-2 | CWE-319: Cleartext Transmission of Sensitive Information")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements")
	}

	// MASVS V5 - MSTG-NETWORK-3 - Server Certificate
	fmt.Printf(string(Purple))
	log.Println("\n==>> The Server Certificate verification...\n")
	fmt.Printf(string(Reset))
	var countServerCert = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_serverCert, err := exec.Command("grep", "-nri", "-e", "X509Certificate", "-e", "checkServerTrusted(", "-e", "checkClientTrusted(", "-e", "getAcceptedIssuers(", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- Server Certificate has not been observed")
			}
			cmd_and_pkg_serverCert_output := string(cmd_and_pkg_serverCert[:])
			if (strings.Contains(cmd_and_pkg_serverCert_output, "checkServerTrusted")) || (strings.Contains(cmd_and_pkg_serverCert_output, "checkClientTrusted")) || (strings.Contains(cmd_and_pkg_serverCert_output, "getAcceptedIssuers")) {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				if (strings.Contains(cmd_and_pkg_serverCert_output, "checkServerTrusted")) || (strings.Contains(cmd_and_pkg_serverCert_output, "checkClientTrusted")) || (strings.Contains(cmd_and_pkg_serverCert_output, "getAcceptedIssuers")) || (strings.Contains(cmd_and_pkg_serverCert_output, "X509Certificate")) {
					log.Println(cmd_and_pkg_serverCert_output)
					countServerCert++
				}
			}
		}
	}
	if int(countServerCert) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended to appropriately verify the Server Certificate, if observed. Please note that, It should be signed by a trusted CA, not expired, not self-signed, etc. While implementing a custom X509TrustManager, the certificate chain needs to be verified appropriately, else the possibility of MITM attacks increases by providing an arbitrary certificate by an attacker.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-NETWORK-3 | CWE-295: Improper Certificate Validation")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements")
	}

	// MASVS V5 - MSTG-NETWORK-3 - WebView Server Certificate
	fmt.Printf(string(Purple))
	log.Println("\n==>> The WebView Server Certificate verification...\n")
	fmt.Printf(string(Reset))
	var countWebviewCert = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_webviewCert, err := exec.Command("grep", "-nri", "-e", "onReceivedSslError", "-e", "sslErrorHandler", "-e", ".proceed(", "-e", "setWebViewClient", "-e", "findViewById", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- WebView Server Certificate has not been observed")
			}
			cmd_and_pkg_webviewCert_output := string(cmd_and_pkg_webviewCert[:])
			if strings.Contains(cmd_and_pkg_webviewCert_output, "onReceivedSslError") {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				if (strings.Contains(cmd_and_pkg_webviewCert_output, "onReceivedSslError")) || (strings.Contains(cmd_and_pkg_webviewCert_output, "sslErrorHandler")) || (strings.Contains(cmd_and_pkg_webviewCert_output, "proceed(")) || (strings.Contains(cmd_and_pkg_webviewCert_output, "setWebViewClient")) || (strings.Contains(cmd_and_pkg_webviewCert_output, "findViewById")) {
					log.Println(cmd_and_pkg_webviewCert_output)
					countWebviewCert++
				}
			}
		}
	}
	if int(countWebviewCert) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - The application seems to be implementing its own onReceivedSslError method, if observed. Please note that, the application should appropriately verify the WebView Server Certificate implementation (such as having a call to the handler.cancel method). TLS certificate errors should not be ignored as the mobile browser performs the server certificate validation when a WebView is used.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-NETWORK-3 | CWE-295: Improper Certificate Validation")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements")
	}

	// MASVS V5 - MSTG-NETWORK-3 - Hostname Verification
	fmt.Printf(string(Purple))
	log.Println("\n==>> The Hostname Verification...\n")
	fmt.Printf(string(Reset))
	var countHostVerf = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_HostnameVerifier, err := exec.Command("grep", "-nri", "-e", " HostnameVerifier", "-e", `.setHostnameVerifier(`, "-e", `.setDefaultHostnameVerifier(`, "-e", "NullHostnameVerifier", "-e", "ALLOW_ALL_HOSTNAME_VERIFIER", "-e", "AllowAllHostnameVerifier", "-e", "NO_VERIFY", "-e", " verify(String ", "-e", "return true", "-e", "return 1", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- Hostname Verification has not been observed")
			}
			cmd_and_pkg_HostnameVerifier_output := string(cmd_and_pkg_HostnameVerifier[:])
			if (strings.Contains(cmd_and_pkg_HostnameVerifier_output, "setHostnameVerifier(")) || (strings.Contains(cmd_and_pkg_HostnameVerifier_output, "setDefaultHostnameVerifier(")) || (strings.Contains(cmd_and_pkg_HostnameVerifier_output, "NullHostnameVerifier")) || (strings.Contains(cmd_and_pkg_HostnameVerifier_output, "ALLOW_ALL_HOSTNAME_VERIFIER")) || (strings.Contains(cmd_and_pkg_HostnameVerifier_output, "AllowAllHostnameVerifier")) || (strings.Contains(cmd_and_pkg_HostnameVerifier_output, "NO_VERIFY")) || (strings.Contains(cmd_and_pkg_HostnameVerifier_output, "verify(String")) {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				if (strings.Contains(cmd_and_pkg_HostnameVerifier_output, "HostnameVerifier")) || (strings.Contains(cmd_and_pkg_HostnameVerifier_output, "ALLOW_ALL_HOSTNAME_VERIFIER")) || (strings.Contains(cmd_and_pkg_HostnameVerifier_output, "NO_VERIFY")) || (strings.Contains(cmd_and_pkg_HostnameVerifier_output, "verify(")) || (strings.Contains(cmd_and_pkg_HostnameVerifier_output, "return true")) || (strings.Contains(cmd_and_pkg_HostnameVerifier_output, "return 1")) {
					log.Println(cmd_and_pkg_HostnameVerifier_output)
					countHostVerf++
				}
			}
		}
	}
	if int(countHostVerf) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended not to set ALLOW_ALL_HOSTNAME_VERIFIER or NO_VERIFY, if observed. Please note that, If class always returns true; upon verify() method, the possibility of MITM attacks increases. The application should always verify a hostname before setting up a trusted connection.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-NETWORK-3 | CWE-297: Improper Validation of Certificate with Host Mismatch")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements")
	}

	// MASVS V5 - MSTG-NETWORK-4 - Hard-coded Certificates/Key/Keystore files
	fmt.Printf(string(Purple))
	log.Println("\n==>> The Hard-coded Certificates/Key/Keystore files...\n")
	fmt.Printf(string(Reset))
	var countCert = 0
	for _, sources_file := range files_res {
		if filepath.Ext(sources_file) == ".cer" || filepath.Ext(sources_file) == ".pem" || filepath.Ext(sources_file) == ".cert" || filepath.Ext(sources_file) == ".crt" || filepath.Ext(sources_file) == ".pub" || filepath.Ext(sources_file) == ".key" || filepath.Ext(sources_file) == ".pfx" || filepath.Ext(sources_file) == ".p12" || filepath.Ext(sources_file) == ".der" || filepath.Ext(sources_file) == ".jks" || filepath.Ext(sources_file) == ".bks" {
			log.Println(sources_file)
			countCert++
		}
	}
	if int(countCert) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - Hard-coded Certificates/Key/Keystore files have been identified, if observed. Please note that, Attacker may bypass SSL Pinning by adding their proxy's certificate to the trusted keystore with the tool such as keytool.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-NETWORK-4 | CWE-295: Improper Certificate Validation")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements")
	}

	// MASVS V5 - MSTG-NETWORK-4 - Certificate Pinning settings
	fmt.Printf(string(Purple))
	log.Println("\n==>> The Certificate Pinning settings...\n")
	fmt.Printf(string(Reset))
	var countCertPin = 0
	for _, sources_file := range files_res {
		if filepath.Ext(sources_file) == ".xml" {
			cmd_and_pkg_certPinning, err := exec.Command("grep", "-nr", "-e", "<pin-set", "-e", "<pin digest", "-e", "<domain", "-e", "<base", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- Certificate Pinning settings has not been observed")
			}
			cmd_and_pkg_certPinning_output := string(cmd_and_pkg_certPinning[:])
			if strings.Contains(cmd_and_pkg_certPinning_output, "<pin") {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				if (strings.Contains(cmd_and_pkg_certPinning_output, "<pin")) || (strings.Contains(cmd_and_pkg_certPinning_output, "<domain")) || (strings.Contains(cmd_and_pkg_certPinning_output, "<base")) {
					log.Println(cmd_and_pkg_certPinning_output)
					countCertPin++
				}
			}
		}
	}
	if int(countCertPin) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended to appropriately set the certificate pinning in the Network Security Configuration file, if observed. Please note that, The expiration time and backup pins should be set.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-NETWORK-4 | CWE-295: Improper Certificate Validation")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements")
	}

	// MASVS V5 - MSTG-NETWORK-4 - Certificate Pinning implementation
	fmt.Printf(string(Purple))
	log.Println("\n==>> The Certificate Pinning implementation...\n")
	fmt.Printf(string(Reset))
	var countCertKeyStore = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_certKeyStore, err := exec.Command("grep", "-nr", "-e", "certificatePinner", "-e", "KeyStore.getInstance", "-e", "trustManagerFactory", "-e", "Retrofit.Builder(", "-e", "Picasso.Builder(", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- Certificate Pinning implementation has not been observed")
			}
			cmd_and_pkg_certKeyStore_output := string(cmd_and_pkg_certKeyStore[:])
			if (strings.Contains(cmd_and_pkg_certKeyStore_output, "certificatePinner")) || (strings.Contains(cmd_and_pkg_certKeyStore_output, "KeyStore.getInstance")) || (strings.Contains(cmd_and_pkg_certKeyStore_output, "trustManagerFactory")) || (strings.Contains(cmd_and_pkg_certKeyStore_output, "Builder(")) {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_certKeyStore_output)
				countCertKeyStore++
			}
		}
	}
	if int(countCertKeyStore) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended to implement Certificate Pinning appropriately, if observed. Please note that the application should use its own certificate store, or pins the endpoint certificate or public key. Further, it should not establish connections with endpoints that offer a different certificate or key, even if signed by a trusted CA.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-NETWORK-4 | CWE-295: Improper Certificate Validation")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements")
	}

	// MASVS V5 - MSTG-NETWORK-4 - Custom Trust Anchors
	fmt.Printf(string(Purple))
	log.Println("\n==>> The custom Trust Anchors...\n")
	fmt.Printf(string(Reset))
	var countTrustAnch = 0
	for _, sources_file := range files_res {
		if filepath.Ext(sources_file) == ".xml" {
			cmd_and_pkg_trustAnchors, err := exec.Command("grep", "-nr", "-e", "<certificates src=", "-e", "<domain", "-e", "<base", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- custom Trust Anchors has not been observed")
			}
			cmd_and_pkg_trustAnchors_output := string(cmd_and_pkg_trustAnchors[:])
			if strings.Contains(cmd_and_pkg_trustAnchors_output, "<certificates") {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				if (strings.Contains(cmd_and_pkg_trustAnchors_output, "<certificates")) || (strings.Contains(cmd_and_pkg_trustAnchors_output, "<domain")) || (strings.Contains(cmd_and_pkg_trustAnchors_output, "<base")) {
					log.Println(cmd_and_pkg_trustAnchors_output)
					countTrustAnch++
				}
			}
		}
	}
	if int(countTrustAnch) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended that custom Trust Anchors such as <certificates src=user should be avoided, if observed. The <pin> should be set appropriately if it cannot be avoided. Please note that, If the app will trust user-supplied CAs by using a custom Network Security Configuration with a custom trust anchor, the possibility of MITM attacks increases.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-NETWORK-4 | CWE-295: Improper Certificate Validation")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements")
	}

	// MASVS V5 - MSTG-NETWORK-6 - Security Provider
	fmt.Printf(string(Purple))
	log.Println("\n==>> The Security Provider implementation...\n")
	fmt.Printf(string(Reset))
	var countProInst = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_ProviderInstaller, err := exec.Command("grep", "-nr", "-e", " ProviderInstaller.installIfNeeded", "-e", " ProviderInstaller.installIfNeededAsync", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- Security Provider implementation has not been observed")
			}
			cmd_and_pkg_ProviderInstaller_output := string(cmd_and_pkg_ProviderInstaller[:])
			if strings.Contains(cmd_and_pkg_ProviderInstaller_output, "ProviderInstaller") {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_ProviderInstaller_output)
				countProInst++
			}
		}
	}
	if int(countProInst) == 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended that applications based on the Android SDK should depend on GooglePlayServices, if not observed. Please note that, The ProviderInstaller class is called with either installIfNeeded or installIfNeededAsync to prevent SSL exploits.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-NETWORK-6 | CWE-693: Protection Mechanism Failure")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements")
	}
	if int(countProInst) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It seems that the ProviderInstaller class is called with either installIfNeeded or installIfNeededAsync to prevent SSL exploits as Android relies on a security provider which comes with the device, if observed.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-NETWORK-6 | CWE-693: Protection Mechanism Failure")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements")
	}

	// OWASP MASVS - V6: Platform Interaction Requirements
	log.Println("\n")
	fmt.Printf(string(BlueBold))
	log.Println(`[+] Hunting begins based on "V6: Platform Interaction Requirements"`)
	fmt.Printf(string(Reset))
	log.Println("[+] ---------------------------------------------------------------")

	// MASVS V6 - MSTG-PLATFORM-1 - Permissions
	fmt.Printf(string(Purple))
	log.Println("\n==>> The Permissions...\n")
	fmt.Printf(string(Reset))
	var countPerm = 0
	for _, sources_file := range files_res {
		if filepath.Ext(sources_file) == ".xml" {
			cmd_and_pkg_permission, err := exec.Command("grep", "-nr", "-E", `<uses-permission|<permission`, sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- Permissions has not been observed")
			}
			cmd_and_pkg_permission_output := string(cmd_and_pkg_permission[:])
			if strings.Contains(cmd_and_pkg_permission_output, "permission") {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_permission_output)
				countPerm++
			}
		}
	}
	if int(countPerm) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended that the appropriate protectionLevel should be configured in the Permission declaration, if observed. Please note that, Dangerous permissions involve the user’s privacy.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-PLATFORM-1 | CWE-276: Incorrect Default Permissions")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment")
	}

	// MASVS V6 - MSTG-PLATFORM-1 - Deprecated/Unsupprotive Permissions
	fmt.Printf(string(Purple))
	log.Println("\n==>> The Deprecated/Unsupprotive Permissions...\n")
	fmt.Printf(string(Reset))
	var countDeprecatedPerm = 0
	for _, sources_file := range files_res {
		if filepath.Ext(sources_file) == ".xml" {
			cmd_and_pkg_deprecatedPerm, err := exec.Command("grep", "-nr", "-E", `BIND_CARRIER_MESSAGING_SERVICE|BIND_CHOOSER_TARGET_SERVICE|GET_TASKS|PERSISTENT_ACTIVITY|PROCESS_OUTGOING_CALLS|READ_INPUT_STATE|RESTART_PACKAGES|SET_PREFERRED_APPLICATIONS|SMS_FINANCIAL_TRANSACTIONS|USE_FINGERPRINT|UNINSTALL_SHORTCUT`, sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- Deprecated/Unsupprotive Permissions has not been observed")
			}
			cmd_and_pkg_deprecatedPerm_output := string(cmd_and_pkg_deprecatedPerm[:])
			if (strings.Contains(cmd_and_pkg_deprecatedPerm_output, "BIND_")) || (strings.Contains(cmd_and_pkg_deprecatedPerm_output, "GET_TASKS")) || (strings.Contains(cmd_and_pkg_deprecatedPerm_output, "PERSISTENT_ACTIVITY")) || (strings.Contains(cmd_and_pkg_deprecatedPerm_output, "PROCESS_OUTGOING_CALLS")) || (strings.Contains(cmd_and_pkg_deprecatedPerm_output, "READ_INPUT_STATE")) || (strings.Contains(cmd_and_pkg_deprecatedPerm_output, "RESTART_PACKAGES")) || (strings.Contains(cmd_and_pkg_deprecatedPerm_output, "SET_PREFERRED_APPLICATIONS")) || (strings.Contains(cmd_and_pkg_deprecatedPerm_output, "SMS_FINANCIAL_TRANSACTIONS")) || (strings.Contains(cmd_and_pkg_deprecatedPerm_output, "USE_FINGERPRINT")) || (strings.Contains(cmd_and_pkg_deprecatedPerm_output, "UNINSTALL_SHORTCUT")) {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_deprecatedPerm_output)
				countDeprecatedPerm++
			}
		}
	}
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_deprecatedPerm, err := exec.Command("grep", "-nr", "-E", `BIND_CARRIER_MESSAGING_SERVICE|BIND_CHOOSER_TARGET_SERVICE|GET_TASKS|PERSISTENT_ACTIVITY|PROCESS_OUTGOING_CALLS|READ_INPUT_STATE|RESTART_PACKAGES|SET_PREFERRED_APPLICATIONS|SMS_FINANCIAL_TRANSACTIONS|USE_FINGERPRINT|UNINSTALL_SHORTCUT`, sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- Deprecated/Unsupprotive Permissions has not been observed")
			}
			cmd_and_pkg_deprecatedPerm_output := string(cmd_and_pkg_deprecatedPerm[:])
			if (strings.Contains(cmd_and_pkg_deprecatedPerm_output, "BIND_")) || (strings.Contains(cmd_and_pkg_deprecatedPerm_output, "GET_TASKS")) || (strings.Contains(cmd_and_pkg_deprecatedPerm_output, "PERSISTENT_ACTIVITY")) || (strings.Contains(cmd_and_pkg_deprecatedPerm_output, "PROCESS_OUTGOING_CALLS")) || (strings.Contains(cmd_and_pkg_deprecatedPerm_output, "READ_INPUT_STATE")) || (strings.Contains(cmd_and_pkg_deprecatedPerm_output, "RESTART_PACKAGES")) || (strings.Contains(cmd_and_pkg_deprecatedPerm_output, "SET_PREFERRED_APPLICATIONS")) || (strings.Contains(cmd_and_pkg_deprecatedPerm_output, "SMS_FINANCIAL_TRANSACTIONS")) || (strings.Contains(cmd_and_pkg_deprecatedPerm_output, "USE_FINGERPRINT")) || (strings.Contains(cmd_and_pkg_deprecatedPerm_output, "UNINSTALL_SHORTCUT")) {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_deprecatedPerm_output)
				countDeprecatedPerm++
			}
		}
	}
	if int(countDeprecatedPerm) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended that the application should not use the Deprecated or Unsupportive permissions, if observed.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-PLATFORM-1 | CWE-276: Incorrect Default Permissions")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment")
	}

	// MASVS V6 - MSTG-PLATFORM-1 - Custom Permissions
	fmt.Printf(string(Purple))
	log.Println("\n==>> The Custom Permissions...\n")
	fmt.Printf(string(Reset))
	var countCustPerm = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_custPerm, err := exec.Command("grep", "-nr", "-e", "checkCallingOrSelfPermission", "-e", "checkSelfPermission", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- Custom Permissions has not been observed")
			}
			cmd_and_pkg_custPerm_output := string(cmd_and_pkg_custPerm[:])
			if (strings.Contains(cmd_and_pkg_custPerm_output, "checkCallingOrSelfPermission")) || (strings.Contains(cmd_and_pkg_custPerm_output, "checkSelfPermission")) {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_custPerm_output)
				countCustPerm++
			}
		}
	}
	if int(countCustPerm) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended that Custom Permissions should be used appropriately, if observed. Please note that, The permissions provided programmatically are enforced in the manifest file, as those are more error-prone and can be bypassed more easily with, e.g., runtime instrumentation.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-PLATFORM-1 | CWE-276: Incorrect Default Permissions")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment")
	}

	// MASVS V6 - MSTG-PLATFORM-1 - Exported service/activity/provider/receiver without permission set
	fmt.Printf(string(Purple))
	log.Println("\n==>> The Exported service/activity/provider/receiver without permission set...\n")
	fmt.Printf(string(Reset))
	exp_PermNotSet1 := `grep -nE '<service|<activity|<provider|<receiver' `
	exp_PermNotSet2 := ` | grep -e 'exported="true"'`
	exp_PermNotSet3 := ` | grep -v 'android:permission="'`
	exp_PermNotSet := exp_PermNotSet1 + and_manifest_path + exp_PermNotSet2 + exp_PermNotSet3
	cmd_and_pkg_permNotSet, err := exec.Command("bash", "-c", exp_PermNotSet).CombinedOutput()
	if err != nil {
		//fmt.Println("- Exported service/activity/provider/receiver without permission set has not been observed")
	}
	cmd_and_pkg_permNotSet_output := string(cmd_and_pkg_permNotSet[:])
	fmt.Printf(string(Brown))
	log.Println(and_manifest_path)
	fmt.Printf(string(Reset))
	log.Println(cmd_and_pkg_permNotSet_output)

	if int(strings.Count(cmd_and_pkg_permNotSet_output, "\n")) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended that the appropriate Permission should be set via android:permission attribute with a proper android:protectionLevel in the AndroidManifest file, if observed. Please note that, The unprotected components can be invoked by other malicious applications and potentially access sensitive data or perform any of the privileged tasks possibly.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-PLATFORM-1 | CWE-276: Incorrect Default Permissions")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment")
	}

	// MASVS V6 - MSTG-PLATFORM-2 - potential SQL Injection
	fmt.Printf(string(Purple))
	log.Println("\n==>> The potential SQL Injection instances...\n")
	fmt.Printf(string(Reset))
	var countSqli = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_sqli, err := exec.Command("grep", "-nr", "-e", ".rawQuery(", "-e", ".execSQL(", "-e", "appendWhere(", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- potential SQL Injection instances have not been observed")
			}
			cmd_and_pkg_sqli_output := string(cmd_and_pkg_sqli[:])
			if (strings.Contains(cmd_and_pkg_sqli_output, ".rawQuery(")) || (strings.Contains(cmd_and_pkg_sqli_output, ".execSQL(")) || (strings.Contains(cmd_and_pkg_sqli_output, ".appendWhere(")) {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_sqli_output)
				countSqli++
			}
		}
	}
	if int(countSqli) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended that Prepared Statements are used or methods have been used securely to perform any sensitive tasks related to the databases, if observed.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-PLATFORM-2 | CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment")
	}

	// MASVS V6 - MSTG-PLATFORM-2 - potential Cross-Site Scripting Flaws
	fmt.Printf(string(Purple))
	log.Println("\n==>> The potential Cross-Site Scripting flaws...\n")
	fmt.Printf(string(Reset))
	var countXSS = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_xss, err := exec.Command("grep", "-nr", "-e", `.evaluateJavascript(`, "-e", `.loadUrl("javascript:`, sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- potential Cross-Site Scripting flaws have not been observed")
			}
			cmd_and_pkg_xss_output := string(cmd_and_pkg_xss[:])
			if (strings.Contains(cmd_and_pkg_xss_output, "javascript")) || (strings.Contains(cmd_and_pkg_xss_output, "evaluateJavascript")) {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_xss_output)
				countXSS++
			}
		}
	}
	if int(countXSS) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended that an appropriate encoding is applied to escape characters, such as HTML entity encoding, if observed.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-PLATFORM-2 | CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment")
	}

	// MASVS V6 - MSTG-PLATFORM-2 - potential Code Execution Flaws
	fmt.Printf(string(Purple))
	log.Println("\n==>> The potential Code Execution flaws...\n")
	fmt.Printf(string(Reset))
	var countRCE = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_RCE, err := exec.Command("grep", "-nr", "-e", `Runtime.getRuntime().exec(`, "-e", `Runtime.getRuntime(`, sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- potential Code Execution flaws have not been observed")
			}
			cmd_and_pkg_RCE_output := string(cmd_and_pkg_RCE[:])
			if strings.Contains(cmd_and_pkg_RCE_output, "getRuntime") {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_RCE_output)
				countRCE++
			}
		}
	}
	if int(countRCE) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended not to execute the commands directly on the Operating System or to never use calls to native commands, if observed.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-PLATFORM-2 | CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment")
	}

	// MASVS V6 - MSTG-PLATFORM-2 - Fragment Injection
	fmt.Printf(string(Purple))
	log.Println("\n==>> The Fragment Injection instances...\n")
	fmt.Printf(string(Reset))
	var countPrefAct = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_prefActivity, err := exec.Command("grep", "-nr", "-e", "extends PreferenceActivity", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- Fragment Injection has not been observed")
			}
			cmd_and_pkg_prefActivity_output := string(cmd_and_pkg_prefActivity[:])
			if strings.Contains(cmd_and_pkg_prefActivity_output, "PreferenceActivity") {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_prefActivity_output)
				countPrefAct++
			}
		}
	}
	if int(countPrefAct) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended to implement isValidFragment method or update the android:targetSdkVersion to 19 or higher, if observed. Please note that, With this vulnerability, an attacker can call fragments inside the target application or run the code present in other classes' constructors.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-PLATFORM-2 | CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment")
	}

	// MASVS V6 - MSTG-PLATFORM-2 - EnableSafeBrowsing
	fmt.Printf(string(Purple))
	log.Println("\n==>> The EnableSafeBrowsing setting...\n")
	fmt.Printf(string(Reset))
	var countSafeBrow = 0
	for _, sources_file := range files_res {
		if filepath.Ext(sources_file) == ".xml" {
			cmd_and_pkg_EnableSafeBrowsing, err := exec.Command("grep", "-nr", "-F", "EnableSafeBrowsing", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- EnableSafeBrowsing has not been observed")
			}
			cmd_and_pkg_EnableSafeBrowsing_output := string(cmd_and_pkg_EnableSafeBrowsing[:])
			if strings.Contains(cmd_and_pkg_EnableSafeBrowsing_output, "EnableSafeBrowsing") {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_EnableSafeBrowsing_output)
				countSafeBrow++
			}
		}
	}
	if int(countSafeBrow) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended that EnableSafeBrowsing should be configured to true, if observed.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-PLATFORM-2 | CWE-940: Improper Verification of Source of a Communication Channel")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment")
	}

	// MASVS V6 - MSTG-PLATFORM-2 - URL Loading in WebViews
	fmt.Printf(string(Purple))
	log.Println("\n==>> The instances of URL Loading in WebViews...\n")
	fmt.Printf(string(Reset))
	var countUrlLoad = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_urlLoading, err := exec.Command("grep", "-nr", "-e", "shouldOverrideUrlLoading(", "-e", "shouldInterceptRequest(", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- URL Loading in WebViews has not been observed")
			}
			cmd_and_pkg_urlLoading_output := string(cmd_and_pkg_urlLoading[:])
			if (strings.Contains(cmd_and_pkg_urlLoading_output, "shouldOverrideUrlLoading")) || (strings.Contains(cmd_and_pkg_urlLoading_output, "shouldInterceptRequest")) {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_urlLoading_output)
				countUrlLoad++
			}
		}
	}
	if int(countUrlLoad) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended to implement custom URL handlers securely, if observed. Please note that, Even if the attacker cannot bypass the checks on loading arbitrary URLs/domains, they may still be able to try to exploit the handlers.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-PLATFORM-2 | CWE-939: Improper Authorization in Handler for Custom URL Scheme")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment")
	}

	// MASVS V6 - MSTG-PLATFORM-3 - Custom URL Schemes
	fmt.Printf(string(Purple))
	log.Println("\n==>> The Custom URL Schemes...\n")
	fmt.Printf(string(Reset))
	var countCustUrlSch = 0
	for _, sources_file := range files_res {
		if filepath.Ext(sources_file) == ".xml" {
			cmd_and_pkg_custUrlSchemes, err := exec.Command("grep", "-nr", "-e", "<intent-filter", "-e", "<data android:scheme", "-e", "<action android:name", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- Custom URL Schemes has not been observed")
			}
			cmd_and_pkg_custUrlSchemes_output := string(cmd_and_pkg_custUrlSchemes[:])
			if strings.Contains(cmd_and_pkg_custUrlSchemes_output, "<intent-filter") {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				if (strings.Contains(cmd_and_pkg_custUrlSchemes_output, "<intent-filter")) || (strings.Contains(cmd_and_pkg_custUrlSchemes_output, "android:")) {
					log.Println(cmd_and_pkg_custUrlSchemes_output)
					countCustUrlSch++
				}
			}
		}
	}
	if int(countCustUrlSch) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended that custom URL schemes should be configured with android:autoVerify=true, if observed.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-PLATFORM-3 | CWE-927: Use of Implicit Intent for Sensitive Communication")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment")
	}

	// MASVS V6 - MSTG-PLATFORM-4 - Implicit intent used for broadcast
	fmt.Printf(string(Purple))
	log.Println("\n==>> The Implicit intents used for broadcast...\n")
	fmt.Printf(string(Reset))
	var countImpliIntBroad = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_impliIntBroad, err := exec.Command("grep", "-nr", "-e", "sendBroadcast(", "-e", "sendOrderedBroadcast(", "-e", "sendStickyBroadcast(", "-e", `new android.content.Intent`, "-e", `new Intent(`, "-e", "setData(", "-e", "putExtra(", "-e", "setFlags(", "-e", "setAction(", "-e", "addFlags(", "-e", "setDataAndType(", "-e", "addCategory(", "-e", "setClassName(", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- Implicit intents used for broadcast  has not been observed")
			}
			cmd_and_pkg_impliIntBroad_output := string(cmd_and_pkg_impliIntBroad[:])
			if (strings.Contains(cmd_and_pkg_impliIntBroad_output, "sendBroadcast(")) || (strings.Contains(cmd_and_pkg_impliIntBroad_output, "sendOrderedBroadcast(")) || (strings.Contains(cmd_and_pkg_impliIntBroad_output, "sendStickyBroadcast(")) {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				if (strings.Contains(cmd_and_pkg_impliIntBroad_output, "Broadcast(")) || (strings.Contains(cmd_and_pkg_impliIntBroad_output, "new Intent(")) || (strings.Contains(cmd_and_pkg_impliIntBroad_output, `new android.content.Intent`)) || (strings.Contains(cmd_and_pkg_impliIntBroad_output, "setData(")) || (strings.Contains(cmd_and_pkg_impliIntBroad_output, "putExtra(")) || (strings.Contains(cmd_and_pkg_impliIntBroad_output, "setFlags(")) || (strings.Contains(cmd_and_pkg_impliIntBroad_output, "setAction(")) || (strings.Contains(cmd_and_pkg_impliIntBroad_output, "addFlags(")) || (strings.Contains(cmd_and_pkg_impliIntBroad_output, "setDataAndType(")) || (strings.Contains(cmd_and_pkg_impliIntBroad_output, "addCategory(")) || (strings.Contains(cmd_and_pkg_impliIntBroad_output, "setClassName(")) {
					log.Println(cmd_and_pkg_impliIntBroad_output)
					countImpliIntBroad++
				}
			}
		}
	}
	if int(countImpliIntBroad) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended to not send the broadcast using an implicit intent, if observed. Use methods such as sendBroadcast, sendOrderedBroadcast, sendStickyBroadcast, etc. appropriately. Please note that, an attacker can intercept or hijack the sensitive data among components. Always use explicit intents for broadcast components or LocalBroadcastManager and use an appropriate permission.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-PLATFORM-4 | CWE-927: Use of Implicit Intent for Sensitive Communication")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment")
	}

	// MASVS V6 - MSTG-PLATFORM-4 - Implicit intent used for activity
	fmt.Printf(string(Purple))
	log.Println("\n==>> The Implicit intents used for activity...\n")
	fmt.Printf(string(Reset))
	var countImpliIntAct = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_impliIntAct, err := exec.Command("grep", "-nr", "-e", "startActivity(", "-e", "startActivityForResult(", "-e", `new android.content.Intent`, "-e", `new Intent(`, "-e", "setData(", "-e", "putExtra(", "-e", "setFlags(", "-e", "setAction(", "-e", "addFlags(", "-e", "setDataAndType(", "-e", "addCategory(", "-e", "setClassName(", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- Implicit intents used for activity  has not been observed")
			}
			cmd_and_pkg_impliIntAct_output := string(cmd_and_pkg_impliIntAct[:])
			if (strings.Contains(cmd_and_pkg_impliIntAct_output, "startActivity(")) || (strings.Contains(cmd_and_pkg_impliIntAct_output, "startActivityForResult(")) {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				if (strings.Contains(cmd_and_pkg_impliIntAct_output, "startActivity")) || (strings.Contains(cmd_and_pkg_impliIntAct_output, "new Intent(")) || (strings.Contains(cmd_and_pkg_impliIntAct_output, `new android.content.Intent`)) || (strings.Contains(cmd_and_pkg_impliIntAct_output, "setData(")) || (strings.Contains(cmd_and_pkg_impliIntAct_output, "putExtra(")) || (strings.Contains(cmd_and_pkg_impliIntAct_output, "setFlags(")) || (strings.Contains(cmd_and_pkg_impliIntAct_output, "setAction(")) || (strings.Contains(cmd_and_pkg_impliIntAct_output, "addFlags(")) || (strings.Contains(cmd_and_pkg_impliIntAct_output, "setDataAndType(")) || (strings.Contains(cmd_and_pkg_impliIntAct_output, "addCategory(")) || (strings.Contains(cmd_and_pkg_impliIntAct_output, "setClassName(")) {
					log.Println(cmd_and_pkg_impliIntAct_output)
					countImpliIntAct++
				}
			}
		}
	}
	if int(countImpliIntAct) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended to not start the activity using an implicit intent, if observed. Please note that, an attacker can hijack the activity and sometimes it may lead to sensitive information disclosure. Always use explicit intents to start activities using the setComponent, setPackage, setClass or setClassName methods of the Intent class.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-PLATFORM-4 | CWE-927: Use of Implicit Intent for Sensitive Communication")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment")
	}

	// MASVS V6 - MSTG-PLATFORM-5 - JavaScript Execution in WebViews
	fmt.Printf(string(Purple))
	log.Println("\n==>> The instances of JavaScript Execution in WebViews...\n")
	fmt.Printf(string(Reset))
	var countSetJavScr = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_setJavaScriptEnabled, err := exec.Command("grep", "-nri", "-e", "setJavaScriptEnabled(", "-e", "WebView", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- JavaScript Execution in WebViews has not been observed")
			}
			cmd_and_pkg_setJavaScriptEnabled_output := string(cmd_and_pkg_setJavaScriptEnabled[:])
			if strings.Contains(cmd_and_pkg_setJavaScriptEnabled_output, "setJavaScriptEnabled") {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				if (strings.Contains(cmd_and_pkg_setJavaScriptEnabled_output, "setJavaScriptEnabled")) || (strings.Contains(cmd_and_pkg_setJavaScriptEnabled_output, "WebView")) {
					log.Println(cmd_and_pkg_setJavaScriptEnabled_output)
					countSetJavScr++
				}
			}
		}
	}
	if int(countSetJavScr) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended to implement JavaScript execution in WebViews securely, if observed. Please note that, depending on the permissions of the application, it may allow an attacker to interact with the different functionalities of the device.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-PLATFORM-5 | CWE-749: Exposed Dangerous Method or Function")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment")
	}

	// MASVS V6 - MSTG-PLATFORM-6 - Remote/Local URL load in WebViews
	fmt.Printf(string(Purple))
	log.Println("\n==>> The instances of Remote/Local URL load in WebViews...\n")
	fmt.Printf(string(Reset))
	var countLoadURL = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_loadUrl, err := exec.Command("grep", "-nr", "-e", `.loadUrl(`, "-e", `.loadDataWithBaseURL(`, sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- Remote/Local URL load in WebViews has not been observed")
			}
			cmd_and_pkg_loadUrl_output := string(cmd_and_pkg_loadUrl[:])
			if (strings.Contains(cmd_and_pkg_loadUrl_output, ".loadUrl")) || (strings.Contains(cmd_and_pkg_loadUrl_output, ".loadDataWithBaseURL")) {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_loadUrl_output)
				countLoadURL++
			}
		}
	}
	if int(countLoadURL) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended to implement Remote/Local URL load in WebViews securely, if observed.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-PLATFORM-6 | CWE-940: Improper Verification of Source of a Communication Channel")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment")
	}

	// MASVS V6 - MSTG-PLATFORM-6 - Hard-coded Links
	fmt.Printf(string(Purple))
	log.Println("\n==>> The Hard-coded links...\n")
	fmt.Printf(string(Reset))
	var countExtLink = 0
	var countExtLink2 = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_extLinks, err := exec.Command("grep", "-nr", "-e", "://", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- Hard-coded links have not been observed")
			}
			cmd_and_pkg_extLinks_output := string(cmd_and_pkg_extLinks[:])
			if strings.Contains(cmd_and_pkg_extLinks_output, "://") {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_extLinks_output)
				countExtLink++
				countExtLink2 = countExtLink2 + strings.Count(cmd_and_pkg_extLinks_output, "\n")
			}
		}
	}
	if int(countExtLink) > 0 {
		log.Println("[+] Total file sources are:", countExtLink, "& its total instances are:", countExtLink2, "\n")
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended that external/hard-coded links have been used wisely across the application, if observed.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-PLATFORM-6 | CWE-200: Exposure of Sensitive Information to an Unauthorized Actor")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment")
	}

	// MASVS V6 - MSTG-PLATFORM-6 - Resource Access permissions
	fmt.Printf(string(Purple))
	log.Println("\n==>> The instances of Resource Access permissions...\n")
	fmt.Printf(string(Reset))
	var countFileAccPerm = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_fileAccessPerm, err := exec.Command("grep", "-nr", "-e", "setAllowFileAccess(", "-e", "setAllowFileAccessFromFileURLs(", "-e", "setAllowUniversalAccessFromFileURLs(", "-e", "setAllowContentAccess(", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- File/Content Access permissions has not been observed")
			}
			cmd_and_pkg_fileAccessPerm_output := string(cmd_and_pkg_fileAccessPerm[:])
			if (strings.Contains(cmd_and_pkg_fileAccessPerm_output, "setAllowFileAccess")) || (strings.Contains(cmd_and_pkg_fileAccessPerm_output, "setAllowFileAccessFromFileURLs")) || (strings.Contains(cmd_and_pkg_fileAccessPerm_output, "setAllowUniversalAccessFromFileURLs")) || (strings.Contains(cmd_and_pkg_fileAccessPerm_output, "setAllowContentAccess")) {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_fileAccessPerm_output)
				countFileAccPerm++
			}
		}
	}
	if int(countFileAccPerm) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended to set Resource Access permissions as false, if observed. Please note that, those functions are quite dangerous as it allows Webview to read all the files that the application has access to.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-PLATFORM-6 | CWE-749: Exposed Dangerous Method or Function")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment")
	}

	// MASVS V6 - MSTG-PLATFORM-6 - Remote WebView Debugging setting
	fmt.Printf(string(Purple))
	log.Println("\n==>> The Remote WebView Debugging setting...\n")
	fmt.Printf(string(Reset))
	var countWebConDebug = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_webConDebug, err := exec.Command("grep", "-nr", "-e", `setWebContentsDebuggingEnabled(`, sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- Remote WebView Debugging has not been observed")
			}
			cmd_and_pkg_webConDebug_output := string(cmd_and_pkg_webConDebug[:])
			if strings.Contains(cmd_and_pkg_webConDebug_output, "setWebContentsDebuggingEnabled") {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_webConDebug_output)
				countWebConDebug++
			}
		}
	}
	if int(countWebConDebug) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended to disable setWebContentsDebuggingEnabled flag, if observed. Please note that, Remote WebView debugging can allow attackers to steal or corrupt the contents of WebViews loaded with web contents (HTML/CSS/JavaScript).")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-PLATFORM-6 | CWE-215: Insertion of Sensitive Information Into Debugging Code")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment")
	}

	// MASVS V6 - MSTG-PLATFORM-7 - Java Objects Are Exposed Through WebViews
	fmt.Printf(string(Purple))
	log.Println("\n==>> The instances of Java Objects exposure through WebViews...\n")
	fmt.Printf(string(Reset))
	var countJavInt = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_addJavascriptInterface, err := exec.Command("grep", "-nr", "-F", "addJavascriptInterface(", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- Java Objects Are Exposed Through WebViews has not been observed")
			}
			cmd_and_pkg_addJavascriptInterface_output := string(cmd_and_pkg_addJavascriptInterface[:])
			if strings.Contains(cmd_and_pkg_addJavascriptInterface_output, "addJavascriptInterface") {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_addJavascriptInterface_output)
				countJavInt++
			}
		}
	}
	if int(countJavInt) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended that only JavaScript provided with the APK should be allowed to use the bridges and no JavaScript should be loaded from remote endpoints, if observed. Please note that, this present a potential security risk if any sensitive data is being exposed through those interfaces.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-PLATFORM-7 | CWE-749: Exposed Dangerous Method or Function")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment")
	}

	// MASVS V6 - MSTG-PLATFORM-8 - Object Persistence
	fmt.Printf(string(Purple))
	log.Println("\n==>> The Object Persistence/Serialization instances...\n")
	fmt.Printf(string(Reset))
	var countSerialize = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_serializable, err := exec.Command("grep", "-nr", "-e", `.getSerializable(`, "-e", `.getSerializableExtra(`, "-e", "new Gson()", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- Object Persistence has not been observed")
			}
			cmd_and_pkg_serializable_output := string(cmd_and_pkg_serializable[:])
			if (strings.Contains(cmd_and_pkg_serializable_output, "getSerializable")) || (strings.Contains(cmd_and_pkg_serializable_output, "Gson")) {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_serializable_output)
				countSerialize++
			}
		}
	}
	if int(countSerialize) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended to use Serializable only when the serialized classes are stable, if observed. Reflection-based persistence should be avoided as the attacker might be able to manipulate it to execute business logic.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-PLATFORM-8 | CWE-502: Deserialization of Untrusted Data")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment")
	}

	// MASVS V6 - MSTG-PLATFORM-10 - WebViews Cleanup
	fmt.Printf(string(Purple))
	log.Println("\n==>> The WebViews Cleanup implementation...\n")
	fmt.Printf(string(Reset))
	var countWebViewCleanUp = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_webViewClean, err := exec.Command("grep", "-nr", "-e", `\.clearCache(`, "-e", `\.deleteAllData(`, "-e", `\.removeAllCookies(`, "-e", `\.deleteRecursively(`, "-e", `\.clearFormData(`, sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- WebViews Cleanup implementation has not been observed")
			}
			cmd_and_pkg_webViewClean_output := string(cmd_and_pkg_webViewClean[:])
			if (strings.Contains(cmd_and_pkg_webViewClean_output, "clearCache")) || (strings.Contains(cmd_and_pkg_webViewClean_output, "deleteAllData")) || (strings.Contains(cmd_and_pkg_webViewClean_output, "removeAllCookies")) || (strings.Contains(cmd_and_pkg_webViewClean_output, "deleteRecursively")) || (strings.Contains(cmd_and_pkg_webViewClean_output, "clearFormData")) {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_webViewClean_output)
				countWebViewCleanUp++
			}
		}
	}
	if int(countWebViewCleanUp) == 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended to clear the WebView resources when the application accesses any sensitive data within that, which may include any files stored locally, the RAM cache, and any loaded JavaScript. Please note that, this present a potential security risk if any sensitive data is being exposed.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS: MSTG-PLATFORM-10 | CWE-200: Exposure of Sensitive Information to an Unauthorized Actor")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment")
	}
	if int(countWebViewCleanUp) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It seems that the application clears the data via some mechanism, if observed. Please note that, the application should clear all the WebView resources including any files stored locally, the RAM cache, and any loaded JavaScript when it accesses any sensitive data within a WebView.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS V6: MSTG-PLATFORM-10 | CWE-200: Exposure of Sensitive Information to an Unauthorized Actor")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment")
	}

	// MASVS V1 - MSTG-ARCH-9 - AppUpdateManager
	fmt.Printf(string(Purple))
	log.Println("\n==>> The Application Update mechanism...\n")
	fmt.Printf(string(Reset))
	var countAppUpManag = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_AppUpdateManager, err := exec.Command("grep", "-nr", "-e", " AppUpdateManager", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- AppUpdateManager has not been observed")
			}
			cmd_and_pkg_AppUpdateManager_output := string(cmd_and_pkg_AppUpdateManager[:])
			if strings.Contains(cmd_and_pkg_AppUpdateManager_output, "AppUpdateManager") {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_AppUpdateManager_output)
				countAppUpManag++
			}
		}
	}
	if int(countAppUpManag) >= 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended that applications should be forced to be updated. If a security update comes in, then AppUpdateType.IMMEDIATE flag should be used in order to make sure that the user cannot go forward with using the app without updating it. Please note that, newer versions of an application will not fix security issues that are living in the backends to which the app communicates.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS V1: MSTG-ARCH-9 | CWE-1277: Firmware Not Updateable")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x06-v1-architecture_design_and_threat_modelling_requireme")
	}

	// MASVS V1 - MSTG-ARCH-9 - potential third-party application installation
	fmt.Printf(string(Purple))
	log.Println("\n==>> The potential third-party application installation mechanism...\n")
	fmt.Printf(string(Reset))
	var countAppInstall = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_AppInstall, err := exec.Command("grep", "-nr", "-e", `\.setDataAndType(`, "-e", `application/vnd.android.package-archive`, "-e", "FileProvider", "-e", "getFileDirPath(", "-e", "installApp(", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- potential third-party application installation has not been observed")
			}
			cmd_and_pkg_AppInstall_output := string(cmd_and_pkg_AppInstall[:])
			if strings.Contains(cmd_and_pkg_AppInstall_output, `vnd.android.package-archive`) {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				if (strings.Contains(cmd_and_pkg_AppInstall_output, "setDataAndType(")) || (strings.Contains(cmd_and_pkg_AppInstall_output, `application/vnd.android.package-archive`)) || (strings.Contains(cmd_and_pkg_AppInstall_output, "FileProvider")) || (strings.Contains(cmd_and_pkg_AppInstall_output, "getFileDirPath")) || (strings.Contains(cmd_and_pkg_AppInstall_output, "installApp")) {
					log.Println(cmd_and_pkg_AppInstall_output)
					countAppInstall++
				}
			}
		}
	}
	if int(countAppInstall) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended to install the application via Google Play and stop using local APK file installation, if observed. If it cannot be avoided, then make sure that the APK file should be stored in a private folder with no overwrite permission. Please note that, Attacker can install a malicious APK file if he/she can control the public folder or path.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS V1: MSTG-ARCH-9 | CWE-940: Improper Verification of Source of a Communication Channel")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x06-v1-architecture_design_and_threat_modelling_requireme")
	}

	// OWASP MASVS - V7: Code Quality and Build Setting Requirements
	log.Println("\n")
	fmt.Printf(string(BlueBold))
	log.Println(`[+] Hunting begins based on "V7: Code Quality and Build Setting Requirements"`)
	fmt.Printf(string(Reset))
	log.Println("[+] -------------------------------------------------------------------------")

	// MASVS V7 - MSTG-CODE-2 - AndroidManifest file - Package Debuggable
	fmt.Printf(string(Purple))
	log.Println("\n==>> The debuggable flag configuration...\n")
	fmt.Printf(string(Reset))
	cmd_and_pkg_debug, err := exec.Command("grep", "-i", "android:debuggable", and_manifest_path).CombinedOutput()
	if err != nil {
		//fmt.Println("[-] android:debuggable has not been observed")
	}
	cmd_and_pkg_debug_output := string(cmd_and_pkg_debug[:])
	cmd_and_pkg_debug_regex := regexp.MustCompile(`android:debuggable="true"`)
	cmd_and_pkg_debug_regex_match := cmd_and_pkg_debug_regex.FindString(cmd_and_pkg_debug_output)
	if cmd_and_pkg_debug_regex_match == "" {
		log.Println(`    - android:debuggable="true" flag has not been observed in the AndroidManifest.xml file.`)
	} else {
		fmt.Printf(string(Brown))
		log.Println(and_manifest_path)
		fmt.Printf(string(Reset))
		log.Printf("    - %s", cmd_and_pkg_debug_regex_match)
		fmt.Printf(string(Cyan))
		log.Printf("\n[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended not to enable the debuggable flag, if observed. Please note that, the enabled setting allows attackers to obtain access to sensitive information, control the application flow, etc.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS V7: MSTG-CODE-2 | CWE-215: Insertion of Sensitive Information Into Debugging Code")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x12-v7-code_quality_and_build_setting_requirements")
	}

	// MASVS V7 - MSTG-CODE-4 - StrictMode
	fmt.Printf(string(Purple))
	log.Println("\n==>> The StrictMode Policy instances...\n")
	fmt.Printf(string(Reset))
	var countStrictMode = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_StrictMode, err := exec.Command("grep", "-nr", "-e", "StrictMode.setThreadPolicy", "-e", "StrictMode.setVmPolicy", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- StrictMode instances have not been observed");
			}
			cmd_and_pkg_StrictMode_output := string(cmd_and_pkg_StrictMode[:])
			if strings.Contains(cmd_and_pkg_StrictMode_output, "StrictMode") {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_StrictMode_output)
				countStrictMode++
			}
		}
	}
	if int(countStrictMode) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended that StrictMode should not be enabled in a production application, if observed. Please note that, It is designed for pre-production use only.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS V7: MSTG-CODE-4 | CWE-749: Exposed Dangerous Method or Function")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x12-v7-code_quality_and_build_setting_requirements")
	}

	// MASVS V7 - MSTG-CODE-6 - Exception Handling
	fmt.Printf(string(Purple))
	log.Println("\n==>> The Exception Handling instances...\n")
	fmt.Printf(string(Reset))
	var countExcepHandl = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_StrictMode, err := exec.Command("grep", "-nr", "-e", ` RuntimeException("`, "-e", "UncaughtExceptionHandler(", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- Exception Handling has not been observed")
			}
			cmd_and_pkg_Exception_output := string(cmd_and_pkg_StrictMode[:])
			if strings.Contains(cmd_and_pkg_Exception_output, "Exception") {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_Exception_output)
				countExcepHandl++
			}
		}
	}
	if int(countExcepHandl) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended that a well-designed and unified scheme to handle exceptions, if observed. Please note that, The application should not expose any sensitive data while handling exceptions in its UI or log-statements.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS V7: MSTG-CODE-6 | CWE-755: Improper Handling of Exceptional Conditions")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x12-v7-code_quality_and_build_setting_requirements")
	}

	// MASVS V7 - MSTG-CODE-9 - Obfuscated Code
	fmt.Printf(string(Purple))
	log.Println("\n==>> The Obfuscated Code blocks...\n")
	fmt.Printf(string(Reset))
	var countObfusc = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_packageObfuscate, err := exec.Command("grep", "-nr", "-F", "package com.a.", sources_file).CombinedOutput()
			if err != nil { //fmt.Println("- Obfuscated Code blocks have not been observed")
			}
			cmd_and_pkg_importObfuscate, err := exec.Command("grep", "-nr", "-F", "import com.a.", sources_file).CombinedOutput()
			if err != nil { //fmt.Println("- Obfuscated Code blocks have not been observed")
			}
			cmd_and_pkg_classObfuscate, err := exec.Command("grep", "-nr", "-F", "class a$b", sources_file).CombinedOutput()
			if err != nil { //fmt.Println("- Obfuscated Code blocks have not been observed")
			}
			cmd_and_pkg_packageObfuscate_output := string(cmd_and_pkg_packageObfuscate[:])
			if strings.Contains(cmd_and_pkg_packageObfuscate_output, "package") {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_packageObfuscate_output)
				countObfusc++
			}
			cmd_and_pkg_importObfuscate_output := string(cmd_and_pkg_importObfuscate[:])
			if strings.Contains(cmd_and_pkg_importObfuscate_output, "import") {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_importObfuscate_output)
				countObfusc++
			}
			cmd_and_pkg_classObfuscate_output := string(cmd_and_pkg_classObfuscate[:])
			if strings.Contains(cmd_and_pkg_classObfuscate_output, "class") {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_classObfuscate_output)
				countObfusc++
			}
		}
	}
	if int(countObfusc) == 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended that some basic obfuscation should be implemented to the release byte-code, if not observed. Please note that, Code obfuscation in the applications protects against reverse engineering, tampering, or other attacks.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS V7: MSTG-CODE-9 | CWE-693: Protection Mechanism Failure")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x12-v7-code_quality_and_build_setting_requirements")
	}
	if int(countObfusc) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It seems that code obfuscation has been identified. It is recommended to check it out manually as well for better clarity.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS V7: MSTG-CODE-9 | CWE-693: Protection Mechanism Failure")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x12-v7-code_quality_and_build_setting_requirements")
	}

	// OWASP MASVS - V8: Resilience Requirements
	log.Println("\n")
	fmt.Printf(string(BlueBold))
	log.Println(`[+] Hunting begins based on "V8: Resilience Requirements"`)
	fmt.Printf(string(Reset))
	log.Println("[+] -----------------------------------------------------")

	// MASVS V8 - MSTG-RESILIENCE-1 - Root Detection
	fmt.Printf(string(Purple))
	log.Println("\n==>> The Root Detection implementation...\n")
	fmt.Printf(string(Reset))
	var countRootDetect = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_rootDetect, err := exec.Command("grep", "-nr", "-e", "supersu", "-e", "superuser", "-e", "/xbin/", "-e", "/sbin/", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- Root Detection has not been observed")
			}
			cmd_and_pkg_rootDetect_output := string(cmd_and_pkg_rootDetect[:])
			if (strings.Contains(cmd_and_pkg_rootDetect_output, "super")) || (strings.Contains(cmd_and_pkg_rootDetect_output, "bin/")) {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_rootDetect_output)
				countRootDetect++
			}
		}
	}
	if int(countRootDetect) == 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended to implement root detection mechanisms in the application, if not observed. Please note that, Multiple detection methods should be implemented so that it cannot be bypassed easily.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS V8: MSTG-RESILIENCE-1 | CWE-250: Execution with Unnecessary Privileges")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x15-v8-resiliency_against_reverse_engineering_requirements")
	}
	if int(countRootDetect) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It seems that root detection mechanism has been implemented. Please note that, Multiple detection methods should be implemented. It is recommended to check it out manually as well for better clarity.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS V8: MSTG-RESILIENCE-1 | CWE-250: Execution with Unnecessary Privileges")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x15-v8-resiliency_against_reverse_engineering_requirements")
	}

	// MASVS V8 - MSTG-RESILIENCE-2 - Anti-Debugging Detection
	fmt.Printf(string(Purple))
	log.Println("\n==>> The Anti-Debugging Detection implementation...\n")
	fmt.Printf(string(Reset))
	var countDebugDetect = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_debugDetect, err := exec.Command("grep", "-nr", "-e", " isDebuggable", "-e", "isDebuggerConnected", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- Anti-Debugging Detection has not been observed")
			}
			cmd_and_pkg_debugDetect_output := string(cmd_and_pkg_debugDetect[:])
			if strings.Contains(cmd_and_pkg_debugDetect_output, "Debug") {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_debugDetect_output)
				countDebugDetect++
			}
		}
	}
	if int(countDebugDetect) == 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended to implement Anti-Debugging detection mechanisms in the application, if not observed. Please note that, Multiple detection methods should be implemented so that it cannot be bypassed easily.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS V8: MSTG-RESILIENCE-2 | CWE-693: Protection Mechanism Failure")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x15-v8-resiliency_against_reverse_engineering_requirements")
	}
	if int(countDebugDetect) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It seems that Anti-Debugging detection mechanism has been implemented. Please note that, Multiple detection methods should be implemented. It is recommended to check it out manually as well for better clarity.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS V8: MSTG-RESILIENCE-2 | CWE-693: Protection Mechanism Failure")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x15-v8-resiliency_against_reverse_engineering_requirements")
	}

	// MASVS V8 - MSTG-RESILIENCE-3 - File Integrity Checks
	fmt.Printf(string(Purple))
	log.Println("\n==>> The File Integrity Checks implementation...\n")
	fmt.Printf(string(Reset))
	var countIntCheck = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_intCheck, err := exec.Command("grep", "-nr", "-e", `.getEntry("classes`, sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- Anti-Debugging Detection has not been observed")
			}
			cmd_and_pkg_intCheck_output := string(cmd_and_pkg_intCheck[:])
			if strings.Contains(cmd_and_pkg_intCheck_output, "classes") {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_intCheck_output)
				countIntCheck++
			}
		}
	}
	if int(countIntCheck) == 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended to implement CRC checks on the app bytecode, native libraries, and important data files, if not observed. Please note that, reverse engineers can easily bypass APK code signature check by re-packaging and re-signing an app. The idea is to have additional controls in place so that the app only runs correctly in its unmodified state, even if the code signature is valid.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS V8: MSTG-RESILIENCE-3 | CWE-693: Protection Mechanism Failure")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x15-v8-resiliency_against_reverse_engineering_requirements")
	}
	if int(countIntCheck) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It seems that CRC checks have been implemented on the app bytecode. Please note that, The idea is to have additional controls in place so that the app only runs correctly in its unmodified state, even if the code signature is valid. It is recommended to check it out manually as well for better clarity.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS V8: MSTG-RESILIENCE-3 | CWE-693: Protection Mechanism Failure")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x15-v8-resiliency_against_reverse_engineering_requirements")
	}

	// MASVS V8 - MSTG-RESILIENCE-5 - Emulator Detection
	fmt.Printf(string(Purple))
	log.Println("\n==>> The Emulator Detection implementation...\n")
	fmt.Printf(string(Reset))
	var countEmulatorDetect = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_emulatorDetect, err := exec.Command("grep", "-nr", "-E", `Build.MODEL.contains\(|Build.MANUFACTURER.contains\(|Build.HARDWARE.contains\(|Build.PRODUCT.contains\(|/genyd`, sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- Anti-Debugging Detection has not been observed")
			}
			cmd_and_pkg_emulatorDetect_output := string(cmd_and_pkg_emulatorDetect[:])
			if (strings.Contains(cmd_and_pkg_emulatorDetect_output, "Build")) || (strings.Contains(cmd_and_pkg_emulatorDetect_output, "genyd")) {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_emulatorDetect_output)
				countEmulatorDetect++
			}
		}
	}
	if int(countEmulatorDetect) == 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended to implement Emulator detection mechanisms in the application, if not observed. Please note that, Multiple detection methods should be implemented so that it cannot be bypassed easily.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS V8: MSTG-RESILIENCE-5 | CWE-693: Protection Mechanism Failure")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x15-v8-resiliency_against_reverse_engineering_requirements")
	}
	if int(countEmulatorDetect) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It seems that Emulator detection mechanism has been implemented. Please note that, Multiple detection methods should be implemented. It is recommended to check it out manually as well for better clarity.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS V8: MSTG-RESILIENCE-5 | CWE-693: Protection Mechanism Failure")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x15-v8-resiliency_against_reverse_engineering_requirements")
	}

	// MASVS V8 - MSTG-RESILIENCE-7 - Defence Mechanisms
	fmt.Printf(string(Purple))
	log.Println("\n==>> The implementation of any Defence Mechanisms...\n")
	fmt.Printf(string(Reset))
	var countDefenceMech = 0
	for _, sources_file := range files {
		if filepath.Ext(sources_file) == ".java" {
			cmd_and_pkg_defenceMech, err := exec.Command("grep", "-nr", "-e", "SafetyNetClient ", sources_file).CombinedOutput()
			if err != nil {
				//fmt.Println("- Defence Mechanisms has not been observed")
			}
			cmd_and_pkg_defenceMech_output := string(cmd_and_pkg_defenceMech[:])
			if strings.Contains(cmd_and_pkg_defenceMech_output, "SafetyNetClient") {
				fmt.Printf(string(Brown))
				log.Println(sources_file)
				fmt.Printf(string(Reset))
				log.Println(cmd_and_pkg_defenceMech_output)
				countDefenceMech++
			}
		}
	}
	if int(countDefenceMech) == 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It is recommended to implement various defence mechanisms such as SafetyNet Attestation API, if not observed.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS V8: MSTG-RESILIENCE-7 | CWE-693: Protection Mechanism Failure")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x15-v8-resiliency_against_reverse_engineering_requirements")
	}
	if int(countDefenceMech) > 0 {
		fmt.Printf(string(Cyan))
		log.Printf("[!] QuickNote:")
		fmt.Printf(string(Reset))
		log.Printf("    - It seems that SafetyNet APIs have been implemented as part of the various defensive mechanisms.")
		fmt.Printf(string(Cyan))
		log.Printf("\n[*] Reference:")
		fmt.Printf(string(Reset))
		log.Printf("    - OWASP MASVS V8: MSTG-RESILIENCE-7 | CWE-693: Protection Mechanism Failure")
		log.Printf("    - https://mobile-security.gitbook.io/masvs/security-requirements/0x15-v8-resiliency_against_reverse_engineering_requirements")
	}

	end_time := time.Now()
	log.Printf("\n[+] Scan has been finished at: %s", end_time)

	log.Println("\n[+] Total time taken for hunting:", time.Since(start_time))
	fmt.Printf(string(RedBold))
	log.Println("\n[*] Thank you for using APKHunt! Made with <3 in India.\n")
	fmt.Printf(string(Reset))
}
